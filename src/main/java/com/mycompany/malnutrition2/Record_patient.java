/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.malnutrition2;

import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Vector;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author hp
 */
public class Record_patient extends javax.swing.JInternalFrame {

    boolean EC[] = {true, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true};
    int val[] = {45, 150, 100, 105, 90, 95, 135, 100, 120, 120, 80, 135, 135, 90, 90, 90, 115, 120, 70, 70};
    //Object DefRowData[] = {"", "", "", false, "", "", 0, "", "", "", "", false, "", "", "", "", "", "", "Normal", "Normal"};
    boolean allFlag = true;
    /**
     * Creates new form Record_patient
     */
    public Record_patient() {
        initComponents();
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception ignored) {
        }
        jTable1.setAutoscrolls(true);
        showAllColumns();
        Vector<Patient> rdData = FileHandling.read();
        get_view().setRowCount(rdData.size());
        for (int i = 0; i < rdData.size(); i++) {
            Patient p = rdData.get(i);
            get_view().setValueAt((i + 1), i, 0);
            get_view().setValueAt(p.getName(), i, 1);
            int months = age_month(p.getDate());
            get_view().setValueAt(months, i, 2);
            get_view().setValueAt(p.isIsPreg(), i, 3);
            get_view().setValueAt(false, i, 11);
            get_view().setValueAt(0, i, 4);
        }
        sorter = new TableRowSorter<TableModel>(get_view());
        jTable1.setRowSorter(sorter);
    }
    private boolean isUpdating = false;
    TableRowSorter<TableModel> sorter = null;

    public DefaultTableModel get_view() {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        return dtm;
    }

    public void showAllColumns() {
        TableColumnModel tm = jTable1.getColumnModel();
        int clmCount = tm.getColumnCount();
        for (int i = 0; i < clmCount; i++) {
            tm.getColumn(i).setMinWidth(val[i]);
            tm.getColumn(i).setMaxWidth(val[i]);
            tm.getColumn(i).setPreferredWidth(val[i]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jRadioButton8 = new javax.swing.JRadioButton();
        jRadioButton9 = new javax.swing.JRadioButton();
        jRadioButton10 = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton11 = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setAutoscrolls(true);
        setFocusCycleRoot(false);
        setLayer(2);
        setOpaque(true);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVerifyInputWhenFocusTarget(false);
        setVisible(true);

        jPanel1.setBackground(new java.awt.Color(161, 190, 149));

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setText("Generate Dummy Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Display Column Selection"));

        buttonGroup1.add(jRadioButton8);
        jRadioButton8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jRadioButton8.setSelected(true);
        jRadioButton8.setText("All Columns");
        jRadioButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton8ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton9);
        jRadioButton9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jRadioButton9.setText("Input Column Only");
        jRadioButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton9ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton10);
        jRadioButton10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jRadioButton10.setText("Result Column Only");
        jRadioButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton8)
                    .addComponent(jRadioButton9)
                    .addComponent(jRadioButton10))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Malnutrition Patient Type"));

        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jRadioButton1.setText("High Risk Patients");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jRadioButton2.setText("Medium Risk Patients");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jRadioButton3.setText("Low Risk Patients");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        buttonGroup2.add(jRadioButton11);
        jRadioButton11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jRadioButton11.setSelected(true);
        jRadioButton11.setText("All Patients");
        jRadioButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton11))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton11))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setText("Export Data (Excel)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setText("Show Report");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Malnutrition Ratio Graph", "Children Malnutrition Graph", "Pregnant Women Malnutrition Graph", "Overall Risk vs Weight Loss", "Overall Risk vs BMI", "Correlation Matrix", "Malnutrition Wight Loss Score vs AD Score Vs RISK", "Malnutrition WeightLoss vs MUAC vs BMI vs HB Vs RISK", " " }));

        jButton4.setText("Calculate");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(24, 24, 24)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setDoubleBuffered(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sr No", "Name", "Age (In Months)", "Pregnant Women", "Height (In Mtr)", "Weight (In Kgs)", "Weight (After 6 Months)", "Weight Loss %", "Weight Loss Score", "BMI after 6 Months", "BMI Score", "Acute Diease Effect", "Acute Diease Score", "Overall Risk", "MUAC (in cm)", "MUAC Result", "Haemoglobin (g/dl)", "Haemoglobin Result", "Bilirubin", "Creatinine"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Boolean.class, java.lang.Float.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, false, false, false, false, true, false, false, true, false, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setDoubleBuffered(true);
        jTable1.setFillsViewportHeight(true);
        jTable1.setFocusCycleRoot(true);
        jTable1.setFocusTraversalPolicyProvider(true);
        jTable1.setInheritsPopupMenu(true);
        jTable1.setRowHeight(25);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        for (int i = 0; i < get_view().getRowCount(); i++) {
            String ageinmo = get_view().getValueAt(i, 2).toString();
            int age = Integer.parseInt(ageinmo);
            String height = HeightGenerator.generateHeight(age);
            get_view().setValueAt(Float.parseFloat(height), i, 4);

            String weight = RandomWeightGenerator.generateWeight(age);
            get_view().setValueAt(Float.parseFloat(weight), i, 5);

            //weight loss 6months
            Random random = new Random();
            double baseWeight = Double.parseDouble(weight);
            double weightGain = 10;   //percentage
            if (random.nextBoolean()) {
                weightGain = -weightGain;
            }
            double randomWeight = random.nextDouble() * weightGain;
            double weight6 = baseWeight + randomWeight;
            get_view().setValueAt(weight6, i, 6);

            //Acute disease effect
            double val = random.nextDouble();
            if (val > 0.70) {
                get_view().setValueAt(true, i, 11);
            }

            //MUAC generate
            int ageInMonths = Integer.parseInt(get_view().getValueAt(i, 2).toString());
            double muac = EstimatedMUACGenerator.generateMUAC(ageInMonths);
            get_view().setValueAt(muac, i, 14);

            //Geneate Hemoglobin
            double generatedHemoglobin = StandardHemoglobinGenerator.generateStandardHemoglobin(ageInMonths);
            get_view().setValueAt(generatedHemoglobin, i, 16);
            //calculations();
        }
        jButton4.doClick();
    }//GEN-LAST:event_jButton1ActionPerformed

    public int age_month(String date) {
        return (AgeCalculator.calculateAgeYears(date) * 12 + AgeCalculator.calculateAgeMonths(date));
    }
    private void jRadioButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton8ActionPerformed
        TableColumnModel tm = jTable1.getColumnModel();
        int clmCount = tm.getColumnCount();
        if (jRadioButton8.isSelected()) {
            for (int i = 0; i < clmCount; i++) {
                tm.getColumn(i).setMinWidth(val[i]);
                tm.getColumn(i).setMaxWidth(val[i]);
                tm.getColumn(i).setPreferredWidth(val[i]);
            }
        }
    }//GEN-LAST:event_jRadioButton8ActionPerformed

    private void jRadioButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton9ActionPerformed
        showAllColumns();
        TableColumnModel tm = jTable1.getColumnModel();
        int clmCount = tm.getColumnCount();
        if (jRadioButton9.isSelected()) {
            for (int i = 0; i < clmCount; i++) {
                if (!EC[i]) {
                    tm.getColumn(i).setMinWidth(0);
                    tm.getColumn(i).setMaxWidth(0);
                    tm.getColumn(i).setPreferredWidth(0);
                }

            }
        }
    }//GEN-LAST:event_jRadioButton9ActionPerformed

    private void jRadioButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton10ActionPerformed
        showAllColumns();
        TableColumnModel tm = jTable1.getColumnModel();
        int clmCount = tm.getColumnCount();
        if (jRadioButton10.isSelected()) {
            for (int i = 0; i < clmCount; i++) {
                if (i == 0 || i == 1 || i == 2 || i == 3 || !EC[i]) {
                    tm.getColumn(i).setMinWidth(val[i]);
                    tm.getColumn(i).setMaxWidth(val[i]);
                    tm.getColumn(i).setPreferredWidth(val[i]);
                } else {
                    tm.getColumn(i).setMinWidth(0);
                    tm.getColumn(i).setMaxWidth(0);
                    tm.getColumn(i).setPreferredWidth(0);
                }

            }
        }
    }//GEN-LAST:event_jRadioButton10ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        List<RowFilter<Object, Object>> filters = new ArrayList<>();
        filters.add(RowFilter.regexFilter("High", 13)); // Filter by last name
        filters.add(RowFilter.regexFilter("Anemic", 17)); // Filter by address

        // Combine the filters into one
        RowFilter<Object, Object> rf = RowFilter.andFilter(filters);
        sorter.setRowFilter(rf);
        allFlag = false;
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        sorter.setRowFilter(RowFilter.regexFilter("Medium"));
        allFlag = false;
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        sorter.setRowFilter(RowFilter.regexFilter("Low"));
        allFlag = false;
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton11ActionPerformed
        sorter.setRowFilter(null);
        allFlag = true;
    }//GEN-LAST:event_jRadioButton11ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            File file = new File("Data.xls");
            if (jRadioButton8.isSelected()) {
                ExportToExcel.excelAll(sorter.getModel(), file);
            } else if (jRadioButton9.isSelected()) {
                ExportToExcel.excelInputOnly(sorter.getModel(), file, EC);
            } else if (jRadioButton10.isSelected()) {
                ExportToExcel.excelResultOnly(sorter.getModel(), file, EC);
            }
            OpenFile.open("Data.xls");
        } catch (Exception er) {

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (jComboBox1.getSelectedIndex() == 0) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    int val1 = 0, val2 = 0, val3 = 0;
                    int rowCount = get_view().getRowCount();
                    for (int i = 0; i < rowCount; i++) {
                        String risk = get_view().getValueAt(i, 13).toString();
                        if (risk.equals("High")) {
                            val1++;
                        } else if (risk.equals("Medium")) {
                            val2++;
                        } else {
                            val3++;
                        }
                    }
                    JTablePieChart.main("Malnutrition Risk", val1, val2, val3);
                }
            });
            t.start();
        }

        if (jComboBox1.getSelectedIndex() == 1) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    int val1 = 0, val2 = 0, val3 = 0;
                    int rowCount = get_view().getRowCount();
                    for (int i = 0; i < rowCount; i++) {
                        String risk = get_view().getValueAt(i, 13).toString();
                        int age = Integer.parseInt(get_view().getValueAt(i, 2).toString());
                        if (age < 120) {
                            if (risk.equals("High")) {
                                val1++;
                            } else if (risk.equals("Medium")) {
                                val2++;
                            } else {
                                val3++;
                            }
                        }
                    }
                    JTablePieChart.main("Children Malnutrition Risk", val1, val2, val3);
                }
            });
            t.start();
        }

        if (jComboBox1.getSelectedIndex() == 2) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    int val1 = 0, val2 = 0, val3 = 0;
                    int rowCount = get_view().getRowCount();
                    for (int i = 0; i < rowCount; i++) {
                        String risk = get_view().getValueAt(i, 13).toString();
                        boolean pw = Boolean.parseBoolean(get_view().getValueAt(i, 3).toString());
                        if (pw) {
                            if (risk.equals("High")) {
                                val1++;
                            } else if (risk.equals("Medium")) {
                                val2++;
                            } else {
                                val3++;
                            }
                        }
                    }
                    JTablePieChart.main("Pregnant Women Malnutrition Risk", val1, val2, val3);
                }
            });
            t.start();
        }

        if (jComboBox1.getSelectedIndex() == 3) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    int rowCount = get_view().getRowCount();
                    double xData[] = new double[rowCount];
                    double yData[] = new double[rowCount];
                    Random random = new Random();
                    for (int i = 0; i < rowCount; i++) {
                        //Wight Loss Score vs AD Score Vs RISK
                        double weightLossScore = Double.parseDouble(get_view().getValueAt(i, 8).toString());
                        String risk = get_view().getValueAt(i, 13).toString();
                        double riskData = 0;
                        if (risk.equals("High")) {
                            riskData = 2;
                        }
                        if (risk.equals("Medium")) {
                            riskData = 1;
                        }
                        xData[i] = weightLossScore * random.nextGaussian();
                        yData[i] =  riskData * random.nextGaussian();
                    }
                    ScatterChartExample.getChartWeightvsRisk("Weight Score vs Overall Risk", xData, yData);
                }
            });
            t.start();
        }

        if (jComboBox1.getSelectedIndex() == 4) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    int val1 = 0, val2 = 0, val3 = 0;
                    int rowCount = get_view().getRowCount();
                    double xData[] = new double[rowCount];
                    double yData[] = new double[rowCount];
                    Random random = new Random();
                    for (int i = 0; i < rowCount; i++) {
                        double bmiscore = Double.parseDouble(get_view().getValueAt(i, 10).toString());
                        String risk = get_view().getValueAt(i, 13).toString();
                        double riskData = 0;
                        if (risk.equals("High")) {
                            riskData = 2;
                        }
                        if (risk.equals("Medium")) {
                            riskData = 1;
                        }
                        xData[i] = riskData * random.nextGaussian();
                        yData[i] = bmiscore * random.nextGaussian();
                    }
                    ScatterChartExample.getChartBMIvsRisk("BMI vs Overall Risk", xData, yData);
                }
            });
            t.start();
        }

        if (jComboBox1.getSelectedIndex() == 5) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    int rowCount = get_view().getRowCount();
                    double xData[] = new double[rowCount];
                    double yData[] = new double[rowCount];
                    double yData2[] = new double[rowCount];
                    double yData3[] = new double[rowCount];
                    double yData4[] = new double[rowCount];
                    double yData5[] = new double[rowCount];
                    Random random = new Random();
                    for (int i = 0; i < rowCount; i++) {
                        //Wight Loss Score vs AD Score Vs RISK
                        double weightLossScore = Double.parseDouble(get_view().getValueAt(i, 8).toString());
                        double bmiscore = Double.parseDouble(get_view().getValueAt(i, 10).toString());
                        double adScore = Double.parseDouble(get_view().getValueAt(i, 12).toString());
                        double MUAC = Double.parseDouble(get_view().getValueAt(i, 14).toString());
                        double HB = Double.parseDouble(get_view().getValueAt(i, 16).toString());
                        String risk = get_view().getValueAt(i, 13).toString();
                        double riskData = 1;
                        if (risk.equals("High")) {
                            riskData = 3;
                        }
                        if (risk.equals("Medium")) {
                            riskData = 2;
                        }
                        xData[i] = riskData;
                        yData[i] = weightLossScore;
                        yData2[i] = bmiscore;
                        yData3[i] = adScore;
                        yData4[i] = MUAC;
                        yData5[i] = HB;
                    }
                    CorrelationMatrix.main(xData, yData, yData2, yData3, yData4, yData5);
                }
            });
            t.start();
        }

        if (jComboBox1.getSelectedIndex() == 6) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    int rowCount = get_view().getRowCount();
                    double xData[] = new double[rowCount];
                    double yData[] = new double[rowCount];
                    double yData2[] = new double[rowCount];
                    double yData3[] = new double[rowCount];
                    Random random = new Random();
                    for (int i = 0; i < rowCount; i++) {
                        //Wight Loss Score vs AD Score Vs RISK
                        double weightLossScore = Double.parseDouble(get_view().getValueAt(i, 8).toString());
                        double bmiscore = Double.parseDouble(get_view().getValueAt(i, 10).toString());
                        double adScore = Double.parseDouble(get_view().getValueAt(i, 12).toString());
                        String risk = get_view().getValueAt(i, 13).toString();
                        double riskData = 1;
                        if (risk.equals("High")) {
                            riskData = 3;
                        }
                        if (risk.equals("Medium")) {
                            riskData = 2;
                        }
                        xData[i] = riskData * random.nextGaussian();
                        yData[i] = weightLossScore * random.nextGaussian();
                        yData2[i] = bmiscore * random.nextGaussian();
                        yData3[i] = adScore * random.nextGaussian();
                    }
                    ScatterChartExample.getChartScore("Weight vs MUAC vs BMI vs HB", xData, yData, yData2);
                }
            });
            t.start();
        }

        if (jComboBox1.getSelectedIndex() == 7) {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    int val1 = 0, val2 = 0, val3 = 0;
                    int rowCount = get_view().getRowCount();
                    double xData[] = new double[rowCount];
                    double yData[] = new double[rowCount];
                    double yData2[] = new double[rowCount];
                    double yData3[] = new double[rowCount];
                    double yData4[] = new double[rowCount];
                    Random random = new Random();
                    for (int i = 0; i < rowCount; i++) {
                        double weightLosData = Double.parseDouble(get_view().getValueAt(i, 7).toString());
                        double muacData = Double.parseDouble(get_view().getValueAt(i, 14).toString());
                        double bmiData = Double.parseDouble(get_view().getValueAt(i, 9).toString());
                        double hbData = Double.parseDouble(get_view().getValueAt(i, 16).toString());
                        String risk = get_view().getValueAt(i, 13).toString();
                        double riskData = 1 * 10;
                        if (risk.equals("High")) {
                            riskData = 3 * 10;
                        }
                        if (risk.equals("Medium")) {
                            riskData = 2 * 10;
                        }
                        xData[i] = riskData * random.nextGaussian();
                        yData[i] = muacData * random.nextGaussian();
                        yData2[i] = bmiData * random.nextGaussian();
                        yData3[i] = hbData * random.nextGaussian();
                        yData4[i] = weightLosData * random.nextGaussian();
                    }
                    ScatterChartExample.getChart("Risk vs MUAC vs BMI vs HB vs Weight", xData, yData, yData2, yData3, yData4);
                }
            });
            t.start();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {
            for (int i = 0; i < get_view().getRowCount(); i++) {

                double w = Double.parseDouble(get_view().getValueAt(i, 5) + "");
                double wl = Double.parseDouble(get_view().getValueAt(i, 6) + "");
                double rlt = weight_loss(w, wl);
                //DecimalFormat df = new DecimalFormat("00.00");
                // String formattedWeightLoss = df.format(rlt);
                get_view().setValueAt(rlt, i, 7);
                int WLS = 1;
                if (rlt < 5) {
                    WLS = 0;
                } else if (rlt > 10) {
                    WLS = 2;
                }
                get_view().setValueAt(WLS, i, 8);
                double height = Double.parseDouble(get_view().getValueAt(i, 4).toString());
                double BMI = wl / height / height;
                get_view().setValueAt(BMI, i, 9);

                //BMI Score
                int BS = 1;
                if (BMI > 20) {
                    BS = 0;
                } else if (BMI < 18.5) {
                    BS = 2;
                }
                get_view().setValueAt(BS, i, 10);

                //Acuate score
//            System.out.println(get_view().getValueAt(i, 11).toString());
                boolean as = Boolean.parseBoolean(get_view().getValueAt(i, 11).toString());
                int ascore = 0;
                if (as) {
                    ascore = 2;
                    get_view().setValueAt(2, i, 12);
                } else {
                    ascore = 0;
                    get_view().setValueAt(0, i, 12);
                }

                //Overall score
                double oscore = WLS + ascore + BS;
                String risk = "Low";
                if (oscore == 0.0) {
                    risk = "Low";
                } else if (oscore == 1.0) {
                    risk = "Medium";
                } else {
                    risk = "High";
                }
                get_view().setValueAt(risk, i, 13);

                //MUAC measurement result
                int ageInMonths = Integer.parseInt(get_view().getValueAt(i, 2).toString());
                double muac = Double.parseDouble(get_view().getValueAt(i, 14).toString());
                String mmr = muacMeasurementResult(ageInMonths, muac);
                get_view().setValueAt(mmr, i, 15);

                //Hemoglobin result
                boolean isPregnant = (boolean) get_view().getValueAt(i, 3);
                double hg = Double.parseDouble(get_view().getValueAt(i, 16).toString());
                String anemia = assessAnemia(ageInMonths, hg, isPregnant);
                get_view().setValueAt(anemia, i, 17);
            }
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    public static String assessAnemia(double age, double Hemoglobin, boolean isPregnant) {
        String result;

        if (age < 61) {
            if (Hemoglobin < 11.0) {
                result = "Anemic / Malnourished";
            } else {
                result = "Normal";
            }
        } else {
            if (!isPregnant) {  // Assuming 2 represents a 2-digit pregnancy status code
                if (Hemoglobin < 13.0) {
                    result = "Anemic / Malnourished";
                } else {
                    result = "Normal";
                }
            } else {
                if (Hemoglobin < 11.0) {
                    result = "Anemic / Malnourished";
                } else {
                    result = "Normal";
                }
            }
        }

        return result;
    }

    public static String muacMeasurementResult(int age, double MUAC) {
        String result;

        if (age > 60) {
            if (MUAC < 21.1) {
                result = "SEVERE";
            } else if (MUAC > 23) {
                result = "OK";
            } else {
                result = "MODERATE";
            }
        } else {
            if (MUAC < 11.6) {
                result = "SEVERE";
            } else if (MUAC > 12.5) {
                result = "OK";
            } else {
                result = "MODERATE";
            }
        }

        return result;
    }

    public double weight_loss(double weight, double weight_6) {

        double weightLoss = ((weight - weight_6) / weight) * 100;
        return weightLoss;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton10;
    private javax.swing.JRadioButton jRadioButton11;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
